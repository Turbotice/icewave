clear all
close all

%% Load structured data 
year = '2024';
date = '0223';
drone = 'mesange';
exp_ID = '35-waves_014';
suffixe_fig = [year '_' date '_' drone '_' exp_ID] ;


path2data = ['F:/Rimouski_2024/Data/' year '/' date '/' drone '/matData/' exp_ID '/'];
filename = 'PIV_processed_i00_Dt4_b1_W32_xROI650_width3190_yROI1_height_2159_scaled.mat';
disp('Loading Data..')
load([path2data filename])
disp('Data loaded')

%% Create a folder where figures are saved and define parameters
fig_folder = [path2data 'Plots/'];
if ~exist(fig_folder)
    mkdir(fig_folder)
end

font_size = 13;
facq_x = 1/m.SCALE.fx; % scale in box / meter
facq_t = 1/m.SCALE.ft; % scale in frame / sec
scale_V = m.SCALE.scale_V; % factor scaling for velocity in meter / s
W = m.PIV_param.w ;

%% Get Histogram displacement 

filename = [fig_folder 'Histogramm_displacements_Vx_time_average_' year '_' date '_' drone '_' exp_ID];
average_bool = 1;
get_histogram_displacement(m.Vx/scale_V,W,average_bool,font_size,filename);

%% Get profile of velocity
i_x = 30;
i_y = 60;
left_bool = 1;
% Vx = flip(m.Vx,1);
profile_fig = plot_located_profile(m.Vx,i_x,i_y,facq_x,facq_t,left_bool);
set_Papermode(profile_fig)

fig_file_name = [fig_folder 'Time_profile_'   '_ix_' num2str(i_x) '_iy_' num2str(i_y)];
saveas(profile_fig,fig_file_name,'fig')

%% Get rid off quadratic noise (drone movements)
[nx,ny,nt] = size(m.Vx);
x = (1:1:nx);
y = (ny:-1:1);

% compute the mean component of the velocity field for each frame
Vxmoy = mean(mean(m.Vx,2),1);
Vymoy = mean(mean(m.Vy,2),1);

Vx = supress_quadratic_noise(m.Vx,x,y); 
Vy = supress_quadratic_noise(m.Vy,x,y);
% Vx = flip(Vx,1); % waves are initially coming from the right boarder of the image
% Vy = flip(Vy,1);

disp('Drone motion corrected')

%% Plot main features of the velocity field
disp('Get velocity features')
idx_frame = 20;
caxis_amp = 1.0; % Amplitude of the colorbar scale (in meter / second)

plot_velocity_features(Vx,Vy,facq_x,idx_frame,caxis_amp,fig_folder)

%% Compute Fourier Transform 
disp('Getting Time Fourier transform')
padding_bool = 1;
add_pow2 = 0;
[FFT_t,TF_spectrum,f] = temporal_FFT(Vx(:,:,:),padding_bool,add_pow2,facq_t);

fig_spectrum = figure; 
loglog(f,TF_spectrum)
grid on 
xlabel('$f \: \rm (Hz)$','Interpreter','latex')
ylabel('$\overline {\langle V_x \rangle _{x,y}} (f) \: \rm (m.s^{-1})$','Interpreter','latex')
set_Papermode(gcf)
ax = gca;
ax.FontSize = 13;

file = [fig_folder 'FFT_spectrum_' suffixe_fig];
saveas(fig_spectrum,file,'fig')
saveas(fig_spectrum,file,'pdf')

%% Get demodulated field
disp('Getting demodulated fields')
selected_freq = [0.1 1.0];
x_bound = [1 size(FFT_t,1)];
caxis_amp = 0.03; % amplitude of the colorbar in meter/second
fig_name = ['Demodulated_field_Vx_' suffixe_fig 'caxis_' num2str(caxis_amp) 'ms'];

save_image = 1;
save_video = 1;
plot_demodulated_field(FFT_t,f,facq_x,selected_freq,x_bound,caxis_amp,fig_folder,fig_name,save_image,save_video)


% #####################################
%% #### E(k,f) plot ###################
% #####################################

% FFT 3D of the velocity field 
N = size(Vx);
add_pow2 = [0, 0, 0]; % additional padding for each dimension 
padding = 2.^(nextpow2(N) + add_pow2); % padding for each dimension

disp('Computing FFT 3D')
FFT = fftn(Vx,padding)/numel(Vx); % FFT 
disp('FFT 3D computed')

kx = 2*pi*facq_x*(-padding(1)/2:padding(1)/2-1)/padding(1);
ky = -2*pi*facq_x*(-padding(2)/2:padding(2)/2-1)/padding(2);

% keep only positive frequencies 
FFT_positive = FFT(:,:,1:padding(3)/2 +1);
FFT_positive(:,:,2:end-1) = 2*FFT_positive(:,:,2:end-1);

f = facq_t*(0:padding(3)/2)/padding(3);

% FFT shift for all dimensions
shift = fftshift(fftshift(FFT_positive,2),1);
disp('FFT shifted')

% Radial average for each frequency

radial_step = 1;
% center of the 2D-FFT
x0 = padding(1)/2 + 1;
y0 = padding(2)/2 + 1;

%loop over all frequencies 
for i0 = 1:size(shift,3)
    % demodulated 2D-FFT
    img = shift(:,:,i0);

    [R_tics, R_profile] = radialavg2(abs(img),radial_step,x0,y0);
    E(i0,:) = R_profile; % Amplitude for value (f,k)
end 
disp('E(k,f) computed')

k = 2*pi*R_tics*facq_x/padding(1);

%% Plot A(k,f)
omega = 2*pi*f;
k_list = linspace(0.1,7,100);

g = 9.81; % gravity intensity 
h_w = 3.8; % water depth
rho_ice = 917; % ice density in kg.m-3
rho_w = 1000; % water density in kg.m-3
h_ice = 0.2; % ice thickness in meter

deep_water = sqrt(g*k_list);
shallow = sqrt(g*h_w*k_list.^2);
yth = sqrt(g*k_list.*tanh(h_w*k_list));

y_squire = sqrt(g*k_list.*tanh(h_w*k_list)./(1 + (rho_ice/rho_w)*k_list*h_ice.*tanh(k_list*h_w)));

harmonic2 = sqrt(2*g*k_list.*tanh(h_w*k_list/2));
harmonic3 = sqrt(3*g*k_list.*tanh(h_w*k_list/3));

% plot A(omega,k)
fig_Afk = figure; 
pcolor(k,omega,E)
shading interp
xlabel('$k \: \rm (rad.m^{-1})$')
ylabel('$\omega \: \rm (rad.s^{-1})$')
set(gca,'YScale','log')
set(gca,'XScale','log')
set(gca,'ColorScale','log')
% colormap(slanCM('gnuplot2'))
cbar = colorbar();
cbar.Label.String = '$|\hat{V}_x|(k,\omega)$';
cbar.Label.Interpreter = 'latex';
axis([0.1 5, 0.7 7.0])
hold on 
loglog(k_list,yth,'w--')
hold on
loglog(k_list,harmonic2,'w--')
% hold on 
% loglog(k_list,y_squire,'r--')
hold on 
loglog(k_list,harmonic3,'w--')
set_Papermode(gcf)
set(gca,'FontSize',13)
clim([1e-4 2e-2])
% xticks([1e-1 2e-1 3e-1 1 2 3])
% lgnd = legend('',['$\omega^2 = gk \tanh(gh_w) \: h_w = ' num2str(h_w) '\: \rm m$'],'','');
% set(lgnd,'Location','southeast')
% set(lgnd,'color','none')
% loglog(k_list,harmonic2,'w--')
% hold on 
% loglog(k_list,harmonic3,'w--')
% colormap(slanCM('thermal-2'))

fig_filename = ['Afk_' suffixe_fig 'with_harmonics_hw' num2str(h_w)];
fig_filename = replace(fig_filename,'.','p');

saveas(fig_Afk,[fig_folder fig_filename],'fig')
saveas(fig_Afk,[fig_folder fig_filename],'pdf')

%% Save data of plots
data_filename = ['Data_Afk_' suffixe_fig];
data_filename = replace(data_filename,'.','p');

save([fig_folder data_filename],'f','omega','k','E','shift','-v7.3')
disp('Data saved')


%% Load Data for A(f,k) plot
filename = 'Data_A_fk_0223_waves_010.mat' ;

disp('Loading data..')
load([fig_folder filename])
disp('Data loaded')


%% Detect each branch of bound waves

% Select a profile of the A(f,k) : 
selected_freq = 0.63;
[~,idx_freq] = min(abs(selected_freq - f));

% figure(10),
% plot(2*pi./k,E(idx_freq,:))
% xlabel('$\lambda \: \rm (m)$')
% ylabel('$|\hat{V}_x|(k) \: \rm (m.s^{-1})$')
% xlim([0 50])
freq_end = 0.9; % stop loop at this frequency
[~,idx_end] = min(abs(freq_end - f));

figure(12)
for i = 1 : idx_end

    disp(['Omega = ' num2str(omega(i))])
    max_absolute = max(E(i,:));
    profile = E(i,:)/max_absolute;
%     figure(11),
%     plot(k,profile)
%     xlabel('$k \: \rm (m^{-1})$')
%     ylabel('$|\hat{V}_x|(k) \: \rm (m.s^{-1})$')
%     xlim(2*pi*[1/50 1/2])
% 
    [pks,locs,w,prom] = findpeaks(profile,'MinPeakProminence',1.5e-1);
    [y_max,k_peaks] = subpix_precision(profile,k',locs);
    
    M_peaks(i).k = k_peaks;
    M_peaks(i).A = y_max*max_absolute;
    M_peaks(i).width = w;
    M_peaks(i).omega = omega(i);
    
%     findpeaks(profile,k,'MinPeakProminence',1e-1,'Annotate','extents')
    plot(k,profile,'o')
    hold on 
    plot(M_peaks(i).k,y_max,'rd')
    xlim(2*pi*[1/50 1/2])
    hold off
    xlabel('$k \: \rm (rad.m^{-1})$')
    ylabel('$\hat{V_x}(k,f) \: \rm (m.s^{-1})$')
    pause(0.1)
end 

%% Plot detected peaks
c = [0 0.4470 0.7410];

figure(13)
for i = 1 : size(M_peaks,2)
%     disp(M_peaks(i).k)
%     disp(M_peaks(i).omega .* ones(1,length(M_peaks(i).k)))
    plot(M_peaks(i).k,M_peaks(i).omega .* ones(1,length(M_peaks(i).k)),'o','MarkerFaceColor',c,'MarkerEdgeColor','k')
    hold on 
end

xlabel('$k \: \rm (m^{-1})$')
ylabel('$\omega \: \rm (rad.s^{-1})$')

%% Filtering data & creating two arrays

omega_array = [];
k_array = [];
amplitude_array = [];
for i = 1 : size(M_peaks,2)
    current_omeg = M_peaks(i).omega .* ones(1,length(M_peaks(i).k)); 
    current_k = M_peaks(i).k;
    current_A = M_peaks(i).A;
    omega_array = cat(2,omega_array,current_omeg); % store omega 
    k_array = cat(2,k_array,current_k);
    amplitude_array = cat(2,amplitude_array,current_A);
end 

%% 

mask = ~(((omega_array > 3.0) & (k_array < 0.7)) | (omega_array < 1.0)); 
omega_array = omega_array(mask);
k_array = k_array(mask);
A_array = amplitude_array(mask);


mask2 = ((omega_array > 1.37) & (k_array < 0.2)) | ((k_array > 0.45) & (omega_array < 1.35))...
    | ((omega_array > 4.95) & (k_array < 0.89)) | ((omega_array > 5.44) & (k_array < 1.3));
mask2 = ~mask2;
omega_array = omega_array(mask2);
k_array = k_array(mask2);
A_array = A_array(mask2);

figure, 
plot(k_array,omega_array,'o')
grid on 


%%

g = 9.81; % gravity intensity 
k_list = linspace(0.05,6,100);
deep_water = sqrt(g*k_list);
h_w = 3.8; % water depth
shallow = sqrt(g*h_w*k_list.^2);
yth = sqrt(g*k_list.*tanh(h_w*k_list));

harmonic1 = sqrt(1*g*k_list.*tanh(h_w*k_list));
harmonic2 = sqrt(2*g*k_list.*tanh(h_w*k_list/2));
harmonic3 = sqrt(3*g*k_list.*tanh(h_w*k_list/3));

figure(14)
loglog(k_array,omega_array,'o','MarkerFaceColor',c,'MarkerEdgeColor','k')
xlabel('$k \: \rm (m^{-1})$')
ylabel('$\omega \: \rm (rad.s^{-1})$')
grid on 
hold on 
loglog(k_list,harmonic1,'--b')
hold on 
loglog(k_list,harmonic2,'--r')
% hold on 
% loglog(k_list,harmonic3,'--g')

% axis([0.05 4 , 1e-1 30])
set_Papermode(gcf)
ax = gca;
ax.FontSize = 13;

% figname = [fig_folder 'Harmonics_shallow_water_hw_' replace(num2str(h_w),'.','p') ];
% saveas(gcf,figname,'fig')
% saveas(gcf,figname,'pdf')
% saveas(gcf,figname,'png')

%% Displace harmonics to main branch

% compute a distance to each harmonics 
N = [1,2,3]';
% k = [1 1.5 2];

% #idx1 : N, idx2 : k
omegaN = bound_harmonicN(k_array,N,h_w);
D = sqrt((repmat(omega_array,[3,1]) - omegaN).*2); 
[~,closest_harmonic] = min(D,[],1);

% set lowest values of k to closest_harmonic = 1
closest_harmonic(k_array < 0.5) = 1;

% set lowest values of harmonic2 to closest_harmonic = 2
% figure,
% mask = (k_array < 0.62) & (closest_harmonic == 3);
% loglog(k_array(mask),omega_array(mask),'o')
% axis([1e-1 2, 5e-1 5])
% closest_harmonic((k_array < 0.62) & (closest_harmonic == 3)) = 2;

%% Plot harmonics with different colours 

% colors = ["blue","red","green"];
% colors = ["#0072BD","#D95319","#77AC30"];
colors = ["#0072BD","#D95319"];
figure(15)
for i = 1 :2
    current_omega = omega_array(closest_harmonic == i);
    current_k = k_array(closest_harmonic == i);
    loglog(current_k,current_omega,'o','MarkerEdgeColor',colors(i))
    hold on
    
end 

xlabel('$k \: \rm (m^{-1})$')
ylabel('$\omega \: \rm (rad.s^{-1})$')
grid on 
hold on 
loglog(k_list,harmonic1,'--b')
hold on 
loglog(k_list,harmonic2,'--r')
% hold on 
% loglog(k_list,harmonic3,'--g')
% axis([0.05 4 , 2e-1 10])
set_Papermode(gcf)
ax = gca;
ax.FontSize = 13;
% 
% figname = [fig_folder 'Harmonics_shallow_water_hw_' replace(num2str(h_w),'.','p') '_different_colors'];
% saveas(gcf,figname,'fig')
% saveas(gcf,figname,'pdf')
% saveas(gcf,figname,'png')

%% Save selected points

filename = 'Data_plot_selected_harmonics_0223_bernache_waves_010';
directory = 'E:/Rimouski_2024/Data/2024/0223/bernache/matData/12-waves_010/Plots/';
save([directory filename],'omega_array','k_array','A_array','closest_harmonic','colors','k_list','harmonic1','harmonic2','-v7.3')

%% Plot each harmonic with a different colormaps corresponding to the intensity of each points (omega,k)

% Load Data of selected harmonics 
filename = 'Data_plot_selected_harmonics_0223_bernache_waves_010';
base = 'E:/Rimouski_2024/Data/2024/0223/bernache/matData/12-waves_010/Plots/';
load([base filename])
disp('Data of separated harmonics loaded')

%%
A_h1 = A_array(closest_harmonic == 1);
A_h1 = (A_h1 - min(A_h1))/(max(A_h1) - min(A_h1));

A_h2 = A_array(closest_harmonic == 2);
A_h2 = (A_h2 - min(A_h2))/(max(A_h2) - min(A_h2));
marker_size = 50;

harmonic_cmaps = figure;
% create two different axes 
ax1 = axes(harmonic_cmaps);
ax2 = copyobj(ax1,harmonic_cmaps);

plot(ax1,k_list,harmonic1,'--b')
hold on
plot(ax1,k_list,harmonic2,'--r')
hold on 
s1 = scatter(ax1,k_array(closest_harmonic == 1),omega_array(closest_harmonic == 1),marker_size,A_h1,'filled','MarkerEdgeColor','k');

s2 = scatter(ax2,k_array(closest_harmonic == 2),omega_array(closest_harmonic == 2),marker_size,A_h2,'filled','MarkerEdgeColor','k');

colormap(ax1,slanCM(9))
colormap(ax2,slanCM(11))
ax2.Visible = "off";

% sets limits of each axes
xlim(ax1,[0.1 5])
xlim(ax2,[0.1 5])
ylim(ax1,[0.7 8])
ylim(ax2,[0.7 8])
grid on 
% set axes scale in log-log
set(ax1,'xscale','log')
set(ax1,'yscale','log')
set(ax2,'xscale','log')
set(ax2,'yscale','log')

xlabel(ax1,'$k \: \rm (rad.m^{-1})$')
ylabel(ax1,'$\omega \: \rm (rad.s^{-1})$')
legend(ax1,['$\omega_1 = \sqrt{gk \tanh(' num2str(h_w) 'k)}$'],...
    ['$\omega_2 = \sqrt{2gk \tanh(' num2str(h_w) '\frac{k}{2})}$'],'','Location','southeast')
ax1.FontSize = 13;
set_Papermode(harmonic_cmaps)

fig_filename = [fig_folder 'Harmonics_colormaps_12-waves_010_hw_' replace(num2str(h_w),'.','p') ];
saveas(harmonic_cmaps,fig_filename,'fig')
saveas(harmonic_cmaps,fig_filename,'pdf')

%% Move each branch back to main one 

figure(16)
for i = 1 :2
    
    current_omega = omega_array(closest_harmonic == i);
    current_k = k_array(closest_harmonic == i);
    if i > 1
        current_omega = current_omega/i;
        current_k = current_k/i;
    end 
    loglog(current_k,current_omega,'o','MarkerFaceColor',colors(i),'MarkerEdgeColor',colors(i),'MarkerSize',5)
    hold on
    
end 

xlabel('$k \: \rm (m^{-1})$')
ylabel('$\omega \: \rm (rad.s^{-1})$')
grid on 
hold on 
loglog(k_list,harmonic1,'--b')
hold on 
loglog(k_list,harmonic2,'--r')
% hold on 
% loglog(k_list,harmonic3,'--g')
axis([0.1 6 , 5e-1 10])
set_Papermode(gcf)
ax = gca;
ax.FontSize = 13;
legend(ax,'','',['$\omega_1 = \sqrt{gk \tanh(' num2str(h_w) 'k)}$'],...
    ['$\omega_2 = \sqrt{2gk \tanh(' num2str(h_w) '\frac{k}{2})}$'],'Location','southeast')
figname = [fig_folder 'Recomposition_harmonics_water_12-waves_010_hw_' replace(num2str(h_w),'.','p')];
saveas(gcf,figname,'fig')
saveas(gcf,figname,'pdf')
saveas(gcf,figname,'png')

